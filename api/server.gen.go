// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for GetApiV1RepositoriesSearchPageNumberParamsOrder.
const (
	Asc  GetApiV1RepositoriesSearchPageNumberParamsOrder = "asc"
	Desc GetApiV1RepositoriesSearchPageNumberParamsOrder = "desc"
)

// Repository defines model for Repository.
type Repository struct {
	ClosedIssuesCount *int       `json:"closed_issues_count,omitempty"`
	ClosedPullsCount  *int       `json:"closed_pulls_count,omitempty"`
	CommitsCount      *int       `json:"commits_count,omitempty"`
	ContributorsCount *int       `json:"contributors_count,omitempty"`
	CreationDate      *time.Time `json:"creation_date,omitempty"`
	Description       *string    `json:"description,omitempty"`
	EventsCount       *int       `json:"events_count,omitempty"`
	ForksCount        *int       `json:"forks_count,omitempty"`
	FullName          string     `json:"full_name"`
	HtmlUrl           string     `json:"html_url"`
	Id                int        `json:"id"`
	Language          string     `json:"language"`
	LatestRelease     *struct {
		PublishedAt *time.Time `json:"published_at,omitempty"`
		TagName     *string    `json:"tag_name,omitempty"`
	} `json:"latest_release,omitempty"`
	LibraryLoc         *int   `json:"library_loc,omitempty"`
	Name               string `json:"name"`
	OpenIssuesCount    *int   `json:"open_issues_count,omitempty"`
	OpenPullsCount     *int   `json:"open_pulls_count,omitempty"`
	SelfWrittenLoc     *int   `json:"self_written_loc,omitempty"`
	StargazersCount    int    `json:"stargazers_count"`
	SubscribersCount   *int   `json:"subscribers_count,omitempty"`
	TotalReleasesCount *int   `json:"total_releases_count,omitempty"`
	WatchersCount      *int   `json:"watchers_count,omitempty"`
}

// GetApiV1RepositoriesSearchPagesParams defines parameters for GetApiV1RepositoriesSearchPages.
type GetApiV1RepositoriesSearchPagesParams struct {
	// Language The primary programming language of the repositories to search for.
	Language string `form:"language" json:"language"`

	// Stars Minimum number of stars a repository must have. e.g., ">100" for more than 100 stars.
	Stars string `form:"stars" json:"stars"`
}

// GetApiV1RepositoriesSearchPageNumberParams defines parameters for GetApiV1RepositoriesSearchPageNumber.
type GetApiV1RepositoriesSearchPageNumberParams struct {
	// Language The primary programming language of the repositories to search for.
	Language string `form:"language" json:"language"`

	// Stars The number of stars a repository must have, e.g., ">100" for more than 100 stars.
	Stars string `form:"stars" json:"stars"`

	// Order The order of the results, either ascending (asc) or descending (desc). Defaults to descending.
	Order *GetApiV1RepositoriesSearchPageNumberParamsOrder `form:"order,omitempty" json:"order,omitempty"`

	// PerPage The number of items to return per page, up to a maximum of 100.
	PerPage *int `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// GetApiV1RepositoriesSearchPageNumberParamsOrder defines parameters for GetApiV1RepositoriesSearchPageNumber.
type GetApiV1RepositoriesSearchPageNumberParamsOrder string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1RepositoriesSearchPages request
	GetApiV1RepositoriesSearchPages(ctx context.Context, params *GetApiV1RepositoriesSearchPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1RepositoriesSearchPageNumber request
	GetApiV1RepositoriesSearchPageNumber(ctx context.Context, pageNumber int, params *GetApiV1RepositoriesSearchPageNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1RepositoriesSearchPages(ctx context.Context, params *GetApiV1RepositoriesSearchPagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RepositoriesSearchPagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1RepositoriesSearchPageNumber(ctx context.Context, pageNumber int, params *GetApiV1RepositoriesSearchPageNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1RepositoriesSearchPageNumberRequest(c.Server, pageNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1RepositoriesSearchPagesRequest generates requests for GetApiV1RepositoriesSearchPages
func NewGetApiV1RepositoriesSearchPagesRequest(server string, params *GetApiV1RepositoriesSearchPagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/repositories/search/pages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stars", runtime.ParamLocationQuery, params.Stars); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1RepositoriesSearchPageNumberRequest generates requests for GetApiV1RepositoriesSearchPageNumber
func NewGetApiV1RepositoriesSearchPageNumberRequest(server string, pageNumber int, params *GetApiV1RepositoriesSearchPageNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "pageNumber", runtime.ParamLocationPath, pageNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/repositories/search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "language", runtime.ParamLocationQuery, params.Language); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "stars", runtime.ParamLocationQuery, params.Stars); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PerPage != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1RepositoriesSearchPagesWithResponse request
	GetApiV1RepositoriesSearchPagesWithResponse(ctx context.Context, params *GetApiV1RepositoriesSearchPagesParams, reqEditors ...RequestEditorFn) (*GetApiV1RepositoriesSearchPagesResponse, error)

	// GetApiV1RepositoriesSearchPageNumberWithResponse request
	GetApiV1RepositoriesSearchPageNumberWithResponse(ctx context.Context, pageNumber int, params *GetApiV1RepositoriesSearchPageNumberParams, reqEditors ...RequestEditorFn) (*GetApiV1RepositoriesSearchPageNumberResponse, error)
}

type GetApiV1RepositoriesSearchPagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Pages The total number of pages available based on the search criteria.
		Pages *int `json:"pages,omitempty"`
	}
	JSON400 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
	JSON403 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
	JSON503 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1RepositoriesSearchPagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RepositoriesSearchPagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1RepositoriesSearchPageNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items []Repository `json:"items"`

		// TotalCount The total number of repositories found.
		TotalCount int `json:"total_count"`
	}
	JSON400 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
	JSON403 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
	JSON503 *struct {
		// Error Error Message.
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1RepositoriesSearchPageNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1RepositoriesSearchPageNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1RepositoriesSearchPagesWithResponse request returning *GetApiV1RepositoriesSearchPagesResponse
func (c *ClientWithResponses) GetApiV1RepositoriesSearchPagesWithResponse(ctx context.Context, params *GetApiV1RepositoriesSearchPagesParams, reqEditors ...RequestEditorFn) (*GetApiV1RepositoriesSearchPagesResponse, error) {
	rsp, err := c.GetApiV1RepositoriesSearchPages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RepositoriesSearchPagesResponse(rsp)
}

// GetApiV1RepositoriesSearchPageNumberWithResponse request returning *GetApiV1RepositoriesSearchPageNumberResponse
func (c *ClientWithResponses) GetApiV1RepositoriesSearchPageNumberWithResponse(ctx context.Context, pageNumber int, params *GetApiV1RepositoriesSearchPageNumberParams, reqEditors ...RequestEditorFn) (*GetApiV1RepositoriesSearchPageNumberResponse, error) {
	rsp, err := c.GetApiV1RepositoriesSearchPageNumber(ctx, pageNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1RepositoriesSearchPageNumberResponse(rsp)
}

// ParseGetApiV1RepositoriesSearchPagesResponse parses an HTTP response from a GetApiV1RepositoriesSearchPagesWithResponse call
func ParseGetApiV1RepositoriesSearchPagesResponse(rsp *http.Response) (*GetApiV1RepositoriesSearchPagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RepositoriesSearchPagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Pages The total number of pages available based on the search criteria.
			Pages *int `json:"pages,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetApiV1RepositoriesSearchPageNumberResponse parses an HTTP response from a GetApiV1RepositoriesSearchPageNumberWithResponse call
func ParseGetApiV1RepositoriesSearchPageNumberResponse(rsp *http.Response) (*GetApiV1RepositoriesSearchPageNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1RepositoriesSearchPageNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items []Repository `json:"items"`

			// TotalCount The total number of repositories found.
			TotalCount int `json:"total_count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest struct {
			// Error Error Message.
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns page count for the results of GitHub Search API for Repositories.
	// (GET /api/v1/repositories/search/pages)
	GetApiV1RepositoriesSearchPages(c *gin.Context, params GetApiV1RepositoriesSearchPagesParams)
	// Abstraction for GitHub Search API.
	// (GET /api/v1/repositories/search/{pageNumber})
	GetApiV1RepositoriesSearchPageNumber(c *gin.Context, pageNumber int, params GetApiV1RepositoriesSearchPageNumberParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1RepositoriesSearchPages operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1RepositoriesSearchPages(c *gin.Context) {

	var err error

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1RepositoriesSearchPagesParams

	// ------------- Required query parameter "language" -------------

	if paramValue := c.Query("language"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument language is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "stars" -------------

	if paramValue := c.Query("stars"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument stars is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "stars", c.Request.URL.Query(), &params.Stars)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stars: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1RepositoriesSearchPages(c, params)
}

// GetApiV1RepositoriesSearchPageNumber operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1RepositoriesSearchPageNumber(c *gin.Context) {

	var err error

	// ------------- Path parameter "pageNumber" -------------
	var pageNumber int

	err = runtime.BindStyledParameterWithOptions("simple", "pageNumber", c.Param("pageNumber"), &pageNumber, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter pageNumber: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1RepositoriesSearchPageNumberParams

	// ------------- Required query parameter "language" -------------

	if paramValue := c.Query("language"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument language is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "language", c.Request.URL.Query(), &params.Language)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter language: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "stars" -------------

	if paramValue := c.Query("stars"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument stars is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "stars", c.Request.URL.Query(), &params.Stars)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter stars: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", c.Request.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter order: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, false, "perPage", c.Request.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter perPage: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1RepositoriesSearchPageNumber(c, pageNumber, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/repositories/search/pages", wrapper.GetApiV1RepositoriesSearchPages)
	router.GET(options.BaseURL+"/api/v1/repositories/search/:pageNumber", wrapper.GetApiV1RepositoriesSearchPageNumber)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW8bNxP+KwTf99AAW0lu2otuLtomQZvWsNNeEkOY3R1pmXBJZjhUogT+78Vwtd6V",
	"JctO2wA++LYkh8Nnvp4Z6bOufBu8Q8dRzz/rWDXYQv48x+CjYU8bWQXyAYkN5rPK+oj1wsSYMC4qnxzL",
	"Nm8C6rk2jnGFpK+KXjAka4/L+bY1fIeIYzJlYk/H5QiBjXeLGhhFZOmpBdZzLRvfsmlRF/29yGTcSq7V",
	"GCsyQW6O9A7nuBYfHXt46endcYFk7cJBiwcfaLi1i0T24KGpD6u04FYJVoc1WmCMvCC0CBH3oxhSaU1s",
	"sF4A399RDKvbjLi6FvflW6w4gzAlAW0W1leHTbjVIT6gu0eKZbE7EyyiXS4+kGFGdzuWyEAr+ITHMyym",
	"UnKlvEOMPYPtvX9U8gNw1RzVdlVowvfJENZ6/lrSYeu4cVaNcuiAKaNkudyLU/ZQlcjw5kIooEuQ02B+",
	"xc1p4kZWOxWi/8gfYNUzw89Tqc6QYl6fVhXGqF75d+gUewWJG3RsKmBUYgRGjmrpSRkntRqxViRn1ggF",
	"THShjTzQINRIvZ1zLTA8mU+5uIfEhIxRX4kJxi199p5hK2fPLMSoTs9e6EKvkWKH/GQym8z6zIFg9Fw/",
	"zVuFDsBNtnwKwUzXJ1PqSdBgnEYEqpppgFXnnhXyvl9Oy8gElayykVv3XOS7gqVQhJzIRSWKVA5Olgzk",
	"16bGWgUgaJGRsjOkYrPNL2oxCfk0mL9OzkfAOt1nGZbY0N/W89c30b1qUAUyLdBG3lsRtK1xK9WnhvJL",
	"xY3EaVAvQexMF5jX8XmfkDZDeK6Ta5ypTAmLbVM5yBc38b00zrSpVS61JZKgkTyOCgZEG9WmyKqBNU4U",
	"TlaTQr3Rb9Js9hRPZrM3Ovuy9YSKG3DqZDbrdAhw/AhtyKlxfeEWc/KVL7LlUoRj8C522fHdbJZbpXeM",
	"XVFDCFbKwHg3fRu7PjPou8HNfZLtxy/zyshDWVTBGoyF0qIqc0l5lwO5DVxFhpEMTIbCGXPLTTa42Q/1",
	"RcpVvUxWnW+NlAr6/l/ZiESe9m38WbbVS4wRVjjZb0H3wfsj1Oq845oO59OHifMXT6Wpa3SC8oeH6s0X",
	"jpGE2y+Q1kgq6+wQP1C/ClBTofrTXdfFTpPL1Dhub68vpYBjaoUa9VyfH+bojhtjshyl9PbIPQuNuXmS",
	"nz3WTj7LE7/nar76511lovqGbDfF8Z5cgVMlqgBReMK4aGpUO91VPc+9V4gfXUyEhXAp92rPpVv/lru1",
	"qj1G5TwrCfzmS/tVZ/a9mpbEYeC8EbX14WCvlshVs8PzJ1t2l8Y+kHsYP30nw4+I8uu006ErPfNftbsK",
	"3Pt11uIhddaDdniqh1TY5kCh0HCDpCBW6GqJxDcQqyfKkxIN/Z58P5mon3AJfeoMx7vWyP4thmQEegy8",
	"7hQO19ClVuZ1yKu8eVl8aZwMY5sxdnOjCki5HAqVQh6wVQsf89TklxKU3QKYHQYfkM66fDoAXy5tdcpi",
	"dmBm+G+nnWzizsf/CZd6rv83Hf6fmG7/nJiO/pkYegEQwWb42XX9S+ru+WmnOJc+ufqWKWn8C2z8SrGF",
	"ffk4SD0OUo+D1O4gdffkIs9e/R0AAP//ZQtxeYkUAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
